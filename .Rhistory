(data.frame(x[,-1, drop = F]))
roxygenise()
predict(post_draws_ar1_adj, data[1,], 5, list)
predict(post_draws_ar1_adj, data[1,], n=1, list)
predict(post_draws_ar1_adj, data[1:2,], n=1, list)
View(predict(post_draws_ar1_adj, data[1:2,], n=1, list))
roxygenise()
plot_positivity(post_draws_ar1_adj)
variables
terms(reg_formula)
reg_formula
terms(Surv(y, delta) ~ A + age + karno + celltype + A*celltype)
attr(terms(Surv(y, delta) ~ A + age + karno + celltype + A*celltype), "term.labels")
var_test <- attr(terms(Surv(y, delta) ~ A + age + karno + celltype + A*celltype), "term.labels")
var_test
var_test[!grepl(treatment, var_test, fixed = TRUE)]
formula
str(d)
roxygenise()
plot_positivity(post_draws_ar1_adj)
plot_positivity(post_draws_ar1_adj, data = data)
roxygenise()
plot_positivity(post_draws_ar1_adj, data = data)
roxygenise()
plot_positivity(post_draws_ar1_adj, data = data)
roxygenise()
plot_positivity(post_draws_ar1_adj, data = data)
V
roxygenise()
min(1:10, 2)
pmin(1:10, 2)
roxygenise()
post_draws_ar1_interaction = bayeshaz(d = data,
reg_formula = Surv(y, delta) ~ A + age + karno*celltype,
model = "AR1",
A = "A",
warmup = 10,
post_iter = 10,
chain = 1)
View(post_draws_ar1_interaction)
post_draws_ar1_interaction = bayeshaz(d = data,
reg_formula = Surv(y, delta) ~ A + age + karno*celltype,
model = "AR1",
A = "A",
warmup = 1000,
post_iter = 1000,
chain = 1)
View(post_draws_ar1_interaction)
reg_formula
formula(
paste(paste(as.character(reg_formula[c(1,3)]), collapse = ""), "+", y_name, "+", delta_name)
)
reg_formula = Surv(y, delta) ~ A + age + karno + celltype
formula(
paste(paste(as.character(reg_formula[c(1,3)]), collapse = ""), "+", y_name, "+", delta_name)
)
View(data)
View(model.matrix(formula(
paste(paste(as.character(reg_formula[c(1,3)]), collapse = ""), "+", y_name, "+", delta_name)
), data = data))
View(model.matrix(formula(
paste(paste(as.character(reg_formula[c(1,3)]), collapse = ""), "+", "y", "+", "delta")
), data = data))
roxygenise()
## covariate-adjusted ----
set.seed(123)
bayeshaz(d = data,
reg_formula = Surv(y, delta) ~ A + age + karno + celltype,
model = "AR1",
A = "A",
warmup = 10,
post_iter = 10,
chain = 1)
View(dsplit)
View(xmat)
bayeshaz(d = data,
reg_formula = Surv(y, delta) ~ A + age + karno*celltype,
model = "AR1",
A = "A",
warmup = 10,
post_iter = 10,
chain = 1)
View(xmat)
roxygenise()
plot(ATE_ind)
plot(ATE_rmean_chain_2)
plot(ATE_rmean_chain_2, mode = 1)
plot(ATE_rmean_chain_2, mode = c(0,1))
plot_positivity(post_draws_ar1_adj, data)
plot_positivity(post_draws_ar1_interaction, data)
plot(post_draws_ar1_adj,
ylim = c(0, 2),
xlim = c(0, 900),
type = 'p',
main = "AR1 Prior Process")
abline(h = mean(colMeans(post_draws_ar1_adj$haz_draws[[1]])), lty=2, col = 'black')
freq_res_adj = eha::pchreg(data = data,
cuts = post_draws_ar1_adj$partition,
formula = Surv(y, delta) ~ A + age + karno + celltype)
points(post_draws_ar1_adj$midpoint, freq_res_adj$hazards,
col = "red", pch = 20, cex = 0.5)
plot(ATE_ind)
set.seed(122132)
post_draws_ar1 = bayeshaz(d = data, ## data set
reg_formula = Surv(y, delta) ~ A,
model = 'AR1', ## choice of smoothing prior - independent or AR1 smoothing
A = 'A', ## which variable is treatment
warmup = 1000, post_iter = 1000)
## ----- plot results with independence prior ----- ##
plot(post_draws_ind,
ylim=c(0,.11), xlim=c(0, 900),
type='p', level_CI = .95,
main='Independent Prior Process', ylab = 'Baseline Hazard Rate',
xlab = 'Time (days)')
roxygenise()
warnings()
## ----- plot results with independence prior ----- ##
plot(post_draws_ind,
ylim=c(0,.11), xlim=c(0, 900),
type='p', level_CI = 0.95,
main='Independent Prior Process', ylab = 'Baseline Hazard Rate',
xlab = 'Time (days)')
warnings()
roxygenise()
## ----- plot results with independence prior ----- ##
plot(post_draws_ind,
ylim=c(0,.11), xlim=c(0, 900),
type='p', level_CI = 0.95,
main='Independent Prior Process', ylab = 'Baseline Hazard Rate',
xlab = 'Time (days)')
abline(h=mean(colMeans(post_draws_ind$haz_draws)), lty=2, col='black')
View(post_draws_ind)
abline(h = mean(colMeans(post_draws_ind$haz_draws[[1]])), lty=2, col = 'black')
legend(x=0, y=.111,
legend = c('Posterior Point/Interval Estimate', 'Frequentist Estimate'),
col=c('black', 'red'), pch=c(20,20), bty='n')
## overlay frequentist point estimates
freq_res = eha::pchreg(data=data,
cuts = post_draws_ind$partition,
formula = Surv(y, delta) ~  A)
points(post_draws_ind$midpoint, freq_res$hazards, col='red',pch=20, cex=.5)
## ----- plot results with AR1 prior ----- ##
plot(post_draws_ar1,
ylim=c(0,.11), xlim=c(0, 900),
type='p', level_CI = .95,
main='AR1 Prior Process',
ylab = 'Baseline Hazard Rate',
xlab = 'Time (days)')
points(post_draws_ar1$midpoint, freq_res$hazards, col='red',pch=20, cex=.5)
abline(h = mean(colMeans(post_draws_ar1$haz_draws[[1]])), lty=2, col = 'black')
gcomp_res = bayesgcomp(post_draws_ar1_adj, ## posterior draws of hazard model
ref = 0, ## treatment reference group
B = 1000, ## monte carlo iterations in g-comp
estimand = "prob")
## survival curve under A=0
plot(gcomp_res, mode = 0, type ='p',
ylim=c(0,1), xlim=c(0, 1000),
xlab='Time (days)', ylab='Survival Probability',
main='Marginal Survival Curve under Standard Chemo')
## overlay kaplan-meier
d0 = data[data$A==0, ]
lines(survfit(data=d0, Surv(y, delta)~ 1))
## survival curve under A=1
plot(gcomp_res, mode = 1, type ='p',
ylim=c(0,1), xlim=c(0, 1000),
xlab='Time (days)', ylab='Survival Probability',
main='Marginal Survival Curve under Novel Chemo')
## overlay kaplan-meier
d1 = data[data$A==1, ]
lines(survfit(data=d1, Surv(y, delta)~ 1))
## difference in survival rate
plot(gcomp_res, mode = 'ATE', ylim=c(-1,1),
main = 'Difference in Marginal Survival Probability',
xlab = 'Time (days)',
ylab = 'Difference')
abline(h=0, lty=2, col='red')
summary( gcomp_res$ATE, quantiles = c(.025, .975) )
summary(post_draws_ar1_adj$beta_draws)
str(survival::veteran)
png(filename = "survival_plots_adj.png", width = 700, height = 300)
par(mfrow=c(1,3))
## survival curve under A=0
plot(gcomp_res, mode = 0, type ='p',
ylim=c(0,1), xlim=c(0, 1000),
xlab='Time (days)', ylab='Survival Probability',
main='Marginal Survival Curve under Standard Chemo')
## overlay kaplan-meier
d0 = data[data$A==0, ]
lines(survfit(data=d0, Surv(y, delta)~ 1))
## survival curve under A=1
plot(gcomp_res, mode = 1, type ='p',
ylim=c(0,1), xlim=c(0, 1000),
xlab='Time (days)', ylab='Survival Probability',
main='Marginal Survival Curve under Novel Chemo')
## overlay kaplan-meier
d1 = data[data$A==1, ]
lines(survfit(data=d1, Surv(y, delta)~ 1))
## difference in survival rate
plot(gcomp_res, mode = 'ATE', ylim=c(-1,1),
main = 'Difference in Marginal Survival Probability',
xlab = 'Time (days)',
ylab = 'Difference')
abline(h=0, lty=2, col='red')
dev.off()
formula1
formula1 <- Surv(y, delta) ~ A + age + karno + celltype
post_draws = bayeshaz(d = data,
reg_formula = formula1,
model = 'AR1',
A = 'A',
warmup = 2000,
post_iter = 1000, ## output 1000 draws
chains = 3)
set.seed(1)
post_draws = bayeshaz(d = data,
reg_formula = formula1,
model = 'AR1',
A = 'A',
warmup = 2000,
post_iter = 1000, ## output 1000 draws
chains = 3)
## ----- plot results with independence prior ----- ##
plot(post_draws_ind,
ylim=c(0,.11), xlim=c(0, 900),
type='p', level_CI = 0.95,
main='Independent Prior Process', ylab = 'Baseline Hazard Rate',
xlab = 'Time (days)')
abline(h = mean(colMeans(post_draws_ind$haz_draws[[1]])), lty=2, col = 'black')
legend(x=0, y=.111,
legend = c('Posterior Point/Interval Estimate', 'Frequentist Estimate'),
col=c('black', 'red'), pch=c(20,20), bty='n')
## ----- plot results with AR1 prior ----- ##
plot(post_draws_ar1,
ylim=c(0,.11), xlim=c(0, 900),
type='p', level_CI = .95,
main='AR1 Prior Process',
ylab = 'Baseline Hazard Rate',
xlab = 'Time (days)')
points(post_draws_ar1$midpoint, freq_res$hazards, col='red',pch=20, cex=.5)
View(post_draws)
View(gcomp_res)
summary(gcomp_res$ATE)
summary(mcmc.list(gcomp_res$ATE))
summary(coda::mcmc.list(gcomp_res$ATE))
?mcmc.list
?mcmc
roxygenise()
results <- bayespipeline(data, reg_formula = Surv(time, status) ~ trt,A = 'trt',ref=0,warmup = 100, post_iter = 100, B = 100)
View(data)
results <- bayespipeline(data, reg_formula = Surv(y, delta) ~ trt,A = 'trt',ref=0,warmup = 100, post_iter = 100, B = 100)
roxygenise()
results <- bayespipeline(data, reg_formula = Surv(y, delta) ~ trt,A = 'trt',ref=0,warmup = 100, post_iter = 100, B = 100)
ref
View(bayeshaz_object)
head(d)
str(d)
data$A = 1*(data$trt == 2)
data$trt == 2
roxygenise()
results <- bayespipeline(data, reg_formula = Surv(y, delta) ~ A,A = 'A',ref=0,warmup = 100, post_iter = 100, B = 100)
list(1,2,3)
mcmc.list(list(1,2,3))
coda::mcmc.list(list(1,2,3))
coda::mcmc.list(list(coda::mcmc(1),coda::mcmc(2),coda::mcmc(3)))
View(coda::mcmc.list(list(coda::mcmc(1),coda::mcmc(2),coda::mcmc(3))))
View(do.call(coda::mcmc.list, list(coda::mcmc(1),coda::mcmc(2),coda::mcmc(3))))
View(do.call(coda::mcmc.list, list(coda::mcmc(1:10),coda::mcmc(2:11),coda::mcmc(3:12))))
roxygenise()
results <- bayespipeline(data, reg_formula = Surv(y, delta) ~ A,A = 'A',ref=0,warmup = 100, post_iter = 100, B = 100)
roxygenise()
results <- bayespipeline(data, reg_formula = Surv(y, delta) ~ A,A = 'A',ref=0,warmup = 100, post_iter = 100, B = 100)
chains
n_draws_chain
start_index
end_index
roxygenise()
results <- bayespipeline(data, reg_formula = Surv(y, delta) ~ A,A = 'A',ref=0,warmup = 100, post_iter = 100, B = 100)
roxygenise()
results <- bayespipeline(data, reg_formula = Surv(y, delta) ~ A,A = 'A',ref=0,warmup = 100, post_iter = 100, B = 100)
roxygenise()
results <- bayespipeline(data, reg_formula = Surv(y, delta) ~ A,A = 'A',ref=0,warmup = 100, post_iter = 100, B = 100)
View(ATE_object)
summary(ATE_object$surv_ref)
summary(ATE_object$surv_ref[,1:50])
plot(ATE_object)
roxygenise()
results <- bayespipeline(data, reg_formula = Surv(y, delta) ~ A,A = 'A',ref=0,warmup = 100, post_iter = 100, B = 100)
plot_survival(post_draws)
plot_survival(post_draws, data[1,])
View(post_draws)
View(data)
plot_survival(post_draws_ind, data[1,])
View(post_draws_ind)
plot_positivity(post_draws_ar1_adj, data)
formula1
plot_positivity(post_draws_ar1_adj, data, formula = formula = A ~ age + karno + celltype)
plot_positivity(post_draws_ar1_adj, data, formula = A ~ age + karno + celltype)
roxygenise()
plot_positivity(post_draws_ar1_adj, data, formula = A ~ age + karno + celltype)
variables
covariates
plot_positivity(post_draws_ar1_adj, data, formula = A ~ age + karno + celltype)
attr(terms(formula)
)
attr(terms(formula), "variables")
terms(formula)
covariates
roxygenise()
plot_positivity(post_draws_ar1_adj, data, formula = A ~ age + karno + celltype)
set.seed(1)
post_draws_ind = bayeshaz(d = data, ## data set
reg_formula = Surv(y, delta) ~ A,
A = 'A', ## which variable is treatment
model = "independent",
sigma = 3,
num_partitions = 100,
warmup = 1000,
post_iter = 1000,
chain = 1
)
set.seed(1)
post_draws_ind = bayeshaz(d = data, ## data set
reg_formula = Surv(y, delta) ~ A,
A = 'A', ## which variable is treatment
model = "independent",
sigma = 3,
num_partition = 100,
warmup = 1000,
post_iter = 1000,
chain = 1)
set.seed(122132)
post_draws_ar1 = bayeshaz(d = data, ## data set
reg_formula = Surv(y, delta) ~ A,
model = 'AR1', ## choice of smoothing prior - independent or AR1 smoothing
A = 'A', ## which variable is treatment
warmup = 1000, post_iter = 1000)
png(filename = "hazard_plots_unadj.png", width = 800, height = 400)
par(mfrow=c(1,2))
## ----- plot results with independence prior ----- ##
plot(post_draws_ind,
ylim=c(0,.11), xlim=c(0, 900),
type='p', level_CI = 0.95,
main='Independent Prior Process', ylab = 'Baseline Hazard Rate',
xlab = 'Time (days)')
abline(h = mean(colMeans(post_draws_ind$haz_draws[[1]])), lty=2, col = 'black')
legend(x=0, y=.111,
legend = c('Posterior Point/Interval Estimate', 'Frequentist Estimate'),
col=c('black', 'red'), pch=c(20,20), bty='n')
## overlay frequentist point estimates
freq_res = eha::pchreg(data=data,
cuts = post_draws_ind$partition,
formula = Surv(y, delta) ~  A)
points(post_draws_ind$midpoint, freq_res$hazards, col='red',pch=20, cex=.5)
## ----- plot results with AR1 prior ----- ##
plot(post_draws_ar1,
ylim=c(0,.11), xlim=c(0, 900),
type='p', level_CI = .95,
main='AR1 Prior Process',
ylab = 'Baseline Hazard Rate',
xlab = 'Time (days)')
points(post_draws_ar1$midpoint, freq_res$hazards, col='red',pch=20, cex=.5)
dev.off()
set.seed(1)
post_draws = bayeshaz(d = data,
reg_formula = formula1,
model = 'AR1',
A = 'A',
warmup = 2000,
post_iter = 1000, ## output 1000 draws
chains = 3)
ATE_chains = bayesgcomp(post_draws,
ref = 0,
B = 1000,
estimand = "prob",
t = c(365, 2*365))
View(data)
## summarize posterior draws of the three chains;
## compute posterior mean and 95% credible interval endpoints
## for 1-yr and 2-yr survival rate differences
summary(ATE_chains$ATE, quantiles = c(.025, .975))
plot(ATE_chains$ATE, ask = F)
png(filename = "traceplots.png", width = 700, height = 500)
plot(ATE_chains$ATE, ask = F)
dev.off()
## at each iteration, plot median, .025, and .975 percentiled
## of previous iterations - these quantiles should stabilize over iterations.
coda::cumuplot(ATE_chains)
## at each iteration, plot median, .025, and .975 percentiled
## of previous iterations - these quantiles should stabilize over iterations.
coda::cumuplot(ATE_chains$ATE)
## if converged, gelman-rubin diagnostic Upper C.I. should be near 1
coda::gelman.diag(ATE_chains$ATE)
set.seed(32123)
B_vec = c(1, 100, 500, 1000)
ATE_list = list()
for(B in B_vec){
gcomp_res = bayesgcomp(post_draws_ar1_adj, ## posterior draws of hazard model
ref = 0, ## treatment reference group
B = B, ## monte carlo iterations in g-comp
t = 365)
ATE_list[[length(ATE_list) + 1 ]] = gcomp_res$ATE
}
View(post_draws_ar1_adj)
set.seed(123)
post_draws_ar1_adj = bayeshaz(d = data,
reg_formula = Surv(y, delta) ~ A + age + karno + celltype,
model = "AR1",
A = "A",
warmup = 1000,
post_iter = 1000,
chain = 1)
set.seed(123)
post_draws_ar1_adj = bayeshaz(d = data,
reg_formula = Surv(y, delta) ~ A + age + karno + celltype,
model = "AR1",
A = "A",
warmup = 1000,
post_iter = 1000,
chains = 1)
set.seed(32123)
B_vec = c(1, 100, 500, 1000)
ATE_list = list()
for(B in B_vec){
gcomp_res = bayesgcomp(post_draws_ar1_adj, ## posterior draws of hazard model
ref = 0, ## treatment reference group
B = B, ## monte carlo iterations in g-comp
t = 365)
ATE_list[[length(ATE_list) + 1 ]] = gcomp_res$ATE
}
png(filename = 'density.png', width = 700, height = 500)
par(mfrow=c(1,1))
plot(density(ATE_list[[1]]), ylim=c(0, 20), col='red',
main = latex2exp::TeX(paste0('Posterior Density of $\\Psi(t)$ for $t=365$') ) )
View(ATE_list)
plot(density(ATE_list[[1]]), ylim=c(0, 20), col='red',
main = latex2exp::TeX(paste0('Posterior Density of $\\Psi(t)$ for $t=365$') ) )
plot(density(as.numeric(ATE_list[[1]])), ylim=c(0, 20), col='red',
main = latex2exp::TeX(paste0('Posterior Density of $\\Psi(t)$ for $t=365$') ) )
View(ATE_list[[1]])
png(filename = 'density.png', width = 700, height = 500)
par(mfrow=c(1,1))
plot(density(ATE_list[[1]][[1]]), ylim=c(0, 20), col='red',
main = latex2exp::TeX(paste0('Posterior Density of $\\Psi(t)$ for $t=365$') ) )
lines(density(ATE_list[[2]][[1]]), col='black')
lines(density(ATE_list[[3]][[1]]), col='blue')
lines(density(ATE_list[[4]][[1]]), col='green')
legend('topleft',
legend = c('B=1', 'B=100', 'B=500', 'B=1000'),
col = c('red','black','blue','green'),
lty=c(1,1,1,1), bty='n')
dev.off()
formula1
str(data)
summary(post_draws_ar1_adj$beta_draws, quantiles = c(.025, .975))
class(post_draws_ar1_adj$beta_draws)
class(post_draws_ar1_adj$beta_draws[[1]])
summary(post_draws_ar1_adj$beta_draws[[1]], quantiles = c(.025, .975))
length(post_draws_ar1_adj$beta_draws)
## summarize posterior draws of the three chains;
## compute posterior mean and 95% credible interval endpoints
## for 1-yr and 2-yr survival rate differences
summary(ATE_chains$ATE, quantiles = c(.025, .975))
plot(ATE_chains$ATE[[1]])
plot(ATE_chains$ATE[[2]])
plot(ATE_chains$ATE)
coda::plot.mcmc
?coda::plot.mcmc
?coda::plot.mcmc.list
## if converged, gelman-rubin diagnostic Upper C.I. should be near 1
coda::gelman.diag(ATE_chains$ATE)
## at each iteration, plot median, .025, and .975 percentiled
## of previous iterations - these quantiles should stabilize over iterations.
coda::cumuplot(ATE_chains$ATE)
View(coda::gelman.diag(ATE_chains$ATE))
roxygenise()
set.seed(1)
post_draws_ind = bayeshaz(data = data, ## data set
reg_formula = Surv(y, delta) ~ A,
A = 'A', ## which variable is treatment
model = "independent",
sigma = 3,
num_partition = 100,
warmup = 1000,
post_iter = 1000,
chain = 1)
plot(post_draws_ind,
ylim = c(0, 0.12),
xlim = c(0, 900),
type = 'p',
main = "Independent Prior Process")
roxygenise()
set.seed(1)
post_draws_ind = bayeshaz(data = data, ## data set
reg_formula = Surv(y, delta) ~ A,
A = 'A', ## which variable is treatment
model = "independent",
sigma = 3,
num_partition = 100,
warmup = 1000,
post_iter = 1000,
chain = 1)
## independent ----
set.seed(1)
post_draws_ind = bayeshaz(data = data, ## data set
reg_formula = Surv(y, delta) ~ A,
A = 'A', ## which variable is treatment
model = "independent",
priorSD = 3,
num_partition = 100,
warmup = 1000,
post_iter = 1000,
chain = 1)
