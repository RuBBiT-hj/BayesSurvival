gsub(" ", "", as.character(formula(y ~ x)))
formula(y ~ x)
formula(y ~ x + z)
gsub(" ", "", as.character(formula(y ~ x + z)))
formula(y ~ x)[2]
formula(y ~ x)[3]
formula(y ~ x + z)[3]
formula_sample <- formula(y ~ x + z + x:z)
formula_sample
gsub(" ", "", as.character(formula_sample[2]))
formula_sample[2]
formula_sample[3]
gsub(" ", "", as.character(reg_formula[3]))
gsub(" ", "", as.character(formula_sample[3]))
as.character(formula_sample[3])
gsub("+", "", as.character(formula_sample[3]))
gsub(" ", "+", as.character(formula_sample[3]))
gsub(" ", "", as.character(formula_sample[3]))
grep(gsub("+", as.character(formula_sample[3])))
grep("[a-z]", letters)
gsub("([ab])", "\\1_\\1_", "abc and ABC")
sub(".*:", "", c("G1:E001", "G2:E002", "G3:E003"))
sub("*:", "", c("G1:E001", "G2:E002", "G3:E003"))
sub(".*:", "", c("G1:E001", "G2:E002", "G3:E003"))
sub("+", "", gsub(" ", "", as.character(formula_sample[3])))
sub("+.", "", as.character(formula_sample[3])))
sub("+.", "", as.character(formula_sample[3]))
sub("+*", "", as.character(formula_sample[3]))
sub("+.*", "", as.character(formula_sample[3]))
sub(".+.*", "", as.character(formula_sample[3]))
sub("*+.", "", as.character(formula_sample[3]))
sub("?+.", "", as.character(formula_sample[3]))
substr("y", gregexpr(",", "y")[[1]][1]+1 ,  gregexpr(")", "y")[[1]][1]-1 )
substr("y_100", gregexpr(",", "y_100")[[1]][1]+1 ,  gregexpr(")", "y_100")[[1]][1]-1 )
gsub(" ", "", as.character(formula_sample[2]))
substr(outcome_char, 6, gregexpr(",", "y")[[1]][1] - 1  )
substr("y", 6, gregexpr(",", "y")[[1]][1] - 1  )
library(stringr)
str_extract("x+z+x:z", +*"")
str_extract("x+z+x:z", "+*")
str_extract("x+z+x:z", "\+*")
str_extract("x+z+x:z", "/+*")
str_extract("x+z+x:z", "*")
str_extract("x+z+x:z", "\\+")
str_extract("x+z+x:z", "\\+.")
str_extract("x+z+x:z", "\\+*")
str_extract("x+z+x:z", "\\d")
str_extract("x+z+x:z", "\\...")
str_extract("x+z+x:z", "\\..")
str_extract("x+z+x:z", "\\+..")
str_extract("x+z+x:z", "\\+")
str_extract("x+z+x:z", ".\\+")
str_extract("x+z+x:z", ".+\\+")
str_extract("x+z+x:z", "\\+?")
str_extract("x+z+x:z", "?\\+")
str_extract("x+z+x:z", "\\+")
str_extract("x+z+x:z", "*+\\+")
str_extract("x+z+x:z", "?+\\+")
str_extract("x+z+x:z", "\\+[]")
str_extract("x+z+x:z", "\\+(.)")
str_extract("x+z+x:z", "\\+[.]")
str_extract("x+z+x:z", "\\+\w")
str_extract("x+z+x:z", "\w")
str_extract("x+z+x:z", "w")
str_extract("x+z+x:z", "\\w")
str_extract("x+z+x:z", "\\w+")
str_extract("x+z+x:z", "\\w+\\w")
str_extract("x+z+x:z", "\\w+\\+")
str_extract("x+z+x:z", "\\w+\\+\\w")
str_extract_all("x+z+x:z", "\\w")
str_extract_all("x+z+x:z", "\\w\\+")
str_extract_all("x+z+x:z", "(\\w)\\+")
str_extract_all("x+z+x:z", "(\\w)")
str_extract_all("x+z+x:z", "\\w?\\+")
str_extract_all("x+z+x:z", "\\*?\\+")
str_extract_all("x+z+x:z", "\[letters]\\+")
str_extract_all("x+z+x:z", "[letters]?\\+")
str_extract_all("x+z+x:z", "?[letters]\\+")
str_extract_all("x+z+x:z", "\?[letters]\\+")
str_extract_all("x+z+x:z", "\\?[letters]\\+")
str_extract_all("x+z+x:z", "\\?[letters]")
str_extract_all("x+z+x:z", "\\?\\+")
str_extract_all("x+z+x:z", "\\?+\\+")
paste0(c("1,2,3"), collapse = ",")
strsplit("x+z+x:z", "[\+]+")
strsplit("x+z+x:z", "[\\+]+")
hist(rbeta(1000, 2, 2))
hist(rbeta(10000, 2, 2))
formula_sample
gsub(" ", "", as.character(formula_sample[2]))
substr("y", 6, gregexpr(",", "y")[[1]][1] - 1  )
outcome_char = gsub(" ", "", as.character(formula_sample[2]))
y_name =substr(outcome_char, 6, gregexpr(",", outcome_char)[[1]][1] - 1  )
y_name
delta_name = substr(outcome_char, gregexpr(",", outcome_char)[[1]][1]+1 ,  gregexpr(")", outcome_char)[[1]][1]-1 )
delta_name
formula_sample
formula_sample = y ~ x*z
post_draws = bayeshaz(d = d,
reg_formula = Surv(time, status) ~ age + ph.ecog + sex,
A = 'sex', num_intervals = 100, warmup = 1000, post_iter = 1000 )
reg_formula = Surv(time, status) ~ age + ph.ecog + sex
outcome_char = gsub(" ", "", as.character(reg_formula[2]))
outcome_char
y_name =substr(outcome_char, 6, gregexpr(",", outcome_char)[[1]][1] - 1  )
delta_name = substr(outcome_char, gregexpr(",", outcome_char)[[1]][1]+1 ,  gregexpr(")", outcome_char)[[1]][1]-1 )
y_name
delta_name
covar_char = gsub(" ", "", as.character(reg_formula[3]))
covar_char
# can use strsplit(covar_char, "[\\+]+")
covar_names = c('age', 'ph.ecog') ## need to get this from covar_char somehow.
covar_names
# can use strsplit(covar_char, "[\\+]+")
covar_names = c('age', 'ph.ecog', 'sex') ## need to get this from covar_char somehow.
strsplit(covar_char, "[\\+]+")
strsplit(covar_char, "[\\+]+")
strsplit(covar_char, "[\\+]+")
y_name
delta_name
hist(rbeta(1000, 4, 4))
hist(rbeta(1000, 1, 1))
gsub(" ", "", as.character(reg_formula[3]))
strsplit(covar_char, "[\\+]+")
strsplit(covar_char, "[\\+]+")[[1]]
bayeshaz = function(d, reg_formula, A, num_intervals=100, warmup=1000, post_iter=1000){
## user-specified intervention variable
trt_names = A
outcome_char = gsub(" ", "", as.character(reg_formula[2]))
### collect user inputs
y_name =substr(outcome_char, 6, gregexpr(",", outcome_char)[[1]][1] - 1  )
delta_name = substr(outcome_char, gregexpr(",", outcome_char)[[1]][1]+1 ,  gregexpr(")", outcome_char)[[1]][1]-1 )
covar_char = gsub(" ", "", as.character(reg_formula[3]))
# can use strsplit(covar_char, "[\\+]+")
# covar_names = c('age', 'ph.ecog', 'sex') ## need to get this from covar_char somehow.
covar_names = strsplit(covar_char, "[\\+]+")[[1]]
y = d[, y_name]
delta = d[,delta_name]
## partition time interval
partition = seq(0, max(y)+.01,length.out=num_intervals)
#outcome = paste0("Surv(", y_name,", ", delta_name,") ~ ")
#reg_formula = as.formula(paste0(outcome, paste0(covar_names, collapse = "+"), "+", paste0(trt_names, collapse = "+") ) )
## create long-form data set
dsplit = survival::survSplit(data = d, formula = reg_formula, cut = partition, id='id')
dsplit$offset = dsplit[,y_name] - dsplit$tstart ## amount of survival time in each interval
dsplit$interval = as.factor(dsplit$tstart) ## factor interval
dsplit$interval_num = as.numeric(as.factor(dsplit$tstart)) ## interval number
## create covariate model matrix
xmat = model.matrix(data=dsplit, object = as.formula(paste0(" ~ -1 + ", covar_char  )) )
## create list of data to pass to Stan model
dlist = list(N=nrow(dsplit),
P = ncol(xmat),
n_pieces = length( unique(dsplit$interval_num) ),
delta = dsplit[, delta_name],
offset  = dsplit$offset,
interval_num = dsplit$interval_num,
xmat = xmat)
mod = cmdstan_model("hazard_mod.stan")
res = mod$sample(data= dlist,
chains = 1,  iter_warmup = warmup, iter_sampling = post_iter)
haz_draws = exp(res$draws("log_haz", format = 'matrix') )
beta_draws = res$draws("beta", format = 'matrix')
xv = (partition[-1] - .5*mean(diff(partition)) ) ## midpoint of each interval
draws = list(haz_draws = haz_draws, beta_draws=beta_draws,
xv = xv, partition = partition )
return(draws)
}
library(survival)
library(cmdstanr)
install.packages("cmdstanr")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
install_cmdstan()
d = survival::cancer
d = d[complete.cases(d),] ## drop missing data
d$id = 1:nrow(d) ## patient id
d$status[d$status==2] = 0
## recode binary variables to 0/1
d$sex[d$sex==2] = 0
d$age = ( d$age - mean(d$age) )/ sd(d$age) ## standardize age
post_draws = bayeshaz(d = d,
reg_formula = Surv(time, status) ~ age + ph.ecog + sex,
A = 'sex', num_intervals = 100, warmup = 1000, post_iter = 1000 )
## posterior mean/ 95% interval
bslhaz_mean = colMeans(post_draws$haz_draws)
bslhaz_lwr = apply(post_draws$haz_draws, 2, quantile, probs=.025)
bslhaz_upr = apply(post_draws$haz_draws, 2, quantile, probs=.975)
bslhaz_mean
View(post_draws)
plot( post_draws$xv, bslhaz_mean, pch=20, ylim=c(0, .05) )
## estimate frequentist piecewise exponential hazard function
freq_res = eha::pchreg(data=d,cuts = seq( 0 , max(d$time) + .01, length.out = 100 ),
formula = Surv(time, status) ~  age + ph.ecog + sex)
View(freq_res)
## overlay frequentist point estimates
points(post_draws$xv, freq_res$hazards, col='red')
plot( post_draws$xv, bslhaz_mean, pch=20, ylim=c(0, .05) )
segments(x0 = post_draws$xv, y0 = bslhaz_lwr,
x1 = post_draws$xv, y1 = bslhaz_upr)
## overlay frequentist point estimates
# points(post_draws$xv, freq_res$hazards, col='red')
points(post_draws$xv, freq_res$hazards, col='red'ï¼Œpch = 19)
## overlay frequentist point estimates
# points(post_draws$xv, freq_res$hazards, col='red')
points(post_draws$xv, freq_res$hazards, col='red', pch = 19)
plot( post_draws$xv, bslhaz_mean, pch=20, ylim=c(0, .05) )
segments(x0 = post_draws$xv, y0 = bslhaz_lwr,
x1 = post_draws$xv, y1 = bslhaz_upr)
## overlay frequentist point estimates
# points(post_draws$xv, freq_res$hazards, col='red')
points(post_draws$xv, freq_res$hazards, col='red', pch = 19, cex = 0.1)
## overlay frequentist point estimates
# points(post_draws$xv, freq_res$hazards, col='red')
points(post_draws$xv, freq_res$hazards, col='red', pch = 19, cex = 0.5)
## overlay frequentist point estimates
# points(post_draws$xv, freq_res$hazards, col='red')
points(post_draws$xv, freq_res$hazards, col=rgb(1,0,0,0.7), pch = 19, cex = 0.5)
plot( post_draws$xv, bslhaz_mean, pch=20, ylim=c(0, .05) )
segments(x0 = post_draws$xv, y0 = bslhaz_lwr,
x1 = post_draws$xv, y1 = bslhaz_upr)
## overlay frequentist point estimates
# points(post_draws$xv, freq_res$hazards, col='red')
points(post_draws$xv, freq_res$hazards, col=rgb(1,0,0,0.7), pch = 19, cex = 0.5)
plot( post_draws$xv, bslhaz_mean, pch=20, ylim=c(0, .05) )
segments(x0 = post_draws$xv, y0 = bslhaz_lwr,
x1 = post_draws$xv, y1 = bslhaz_upr)
## overlay frequentist point estimates
# points(post_draws$xv, freq_res$hazards, col='red')
points(post_draws$xv, freq_res$hazards, col=rgb(1,0,0,0.5), pch = 19, cex = 0.5)
# plot( post_draws$xv, bslhaz_mean, pch=20, ylim=c(0, .05) )
plot( post_draws$xv, bslhaz_mean, pch=20, ylim=c(0, .08) )
segments(x0 = post_draws$xv, y0 = bslhaz_lwr,
x1 = post_draws$xv, y1 = bslhaz_upr)
# plot( post_draws$xv, bslhaz_mean, pch=20, ylim=c(0, .05) )
plot( post_draws$xv, bslhaz_mean, pch=20, ylim=c(0, .1) )
segments(x0 = post_draws$xv, y0 = bslhaz_lwr,
x1 = post_draws$xv, y1 = bslhaz_upr)
## overlay frequentist point estimates
# points(post_draws$xv, freq_res$hazards, col='red')
points(post_draws$xv, freq_res$hazards, col=rgb(1,0,0,0.5), pch = 19, cex = 0.5)
## compare coefficients with frequentist estimates
colMeans(post_draws$beta_draws)
apply(post_draws$beta_draws, 2, quantile, probs=c(.025, .975))
freq_res$coefficients
apply(post_draws$beta_draws, 2, quantile, probs=0.5ï¼‰
apply(post_draws$beta_draws, 2, quantile, probs=0.5)
apply(post_draws$beta_draws, 2, mean)
View(d)
?survival::cancer
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
installedpkgs
R.Version()
R.Version()
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages(missing)
update.packages()
y
chooseBioCmirror()
chooseBioCmirror()
biocLite()
load("installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
for (i in 1:length(missing)) biocLite(missing[i])
library(BiocManager)
library(BiocManager)
for (i in 1:length(missing)) biocLite(missing[i])
BiocManager::install("biocLite")
BiocManager::install(missing)
install.packages("cmdstanr")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
BiocManager::install("biomaRt")
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
missing
BiocManager::available()
BiocManager::available("biomaRt")
BiocManager::install("biomaRt")
library(biomaRt)
