bayeshaz = function(d, reg_formula, A, num_intervals=100, warmup=1000, post_iter=1000){
  ## user-specified intervention variable
  trt_names = A
  
  outcome_char = gsub(" ", "", as.character(reg_formula[2]))
  
  ### collect user inputs 
  
  y_name =substr(outcome_char, 6, gregexpr(",", outcome_char)[[1]][1] - 1  )
  delta_name = substr(outcome_char, gregexpr(",", outcome_char)[[1]][1]+1 ,  gregexpr(")", outcome_char)[[1]][1]-1 )
  
  covar_char = gsub(" ", "", as.character(reg_formula[3]))
  
  # can use strsplit(covar_char, "[\\+]+")
  # covar_names = c('age', 'ph.ecog', 'sex') ## need to get this from covar_char somehow.
  covar_names = strsplit(covar_char, "[\\+]+")[[1]]
  
  y = d[, y_name]
  delta = d[,delta_name]
  
  ## partition time interval
  partition = seq(0, max(y)+.01,length.out=num_intervals)
  
  #outcome = paste0("Surv(", y_name,", ", delta_name,") ~ ")
  #reg_formula = as.formula(paste0(outcome, paste0(covar_names, collapse = "+"), "+", paste0(trt_names, collapse = "+") ) )
  
  ## create long-form data set
  dsplit = survival::survSplit(data = d, formula = reg_formula, cut = partition, id='id')
  
  dsplit$offset = dsplit[,y_name] - dsplit$tstart ## amount of survival time in each interval
  dsplit$interval = as.factor(dsplit$tstart) ## factor interval
  dsplit$interval_num = as.numeric(as.factor(dsplit$tstart)) ## interval number
  
  ## create covariate model matrix
  xmat = model.matrix(data=dsplit, object = as.formula(paste0(" ~ -1 + ", covar_char  )) )
  
  ## create list of data to pass to Stan model 
  
  dlist = list(N=nrow(dsplit),
               P = ncol(xmat),
               n_pieces = length( unique(dsplit$interval_num) ),
               delta = dsplit[, delta_name], 
               offset  = dsplit$offset, 
               interval_num = dsplit$interval_num,
               xmat = xmat)
  
  mod = cmdstan_model("hazard_mod.stan")
  
  res = mod$sample(data= dlist,
                   chains = 1,  iter_warmup = warmup, iter_sampling = post_iter)
  
  haz_draws = exp(res$draws("log_haz", format = 'matrix') )
  beta_draws = res$draws("beta", format = 'matrix')
  
  xv = (partition[-1] - .5*mean(diff(partition)) ) ## midpoint of each interval
  
  draws = list(haz_draws = haz_draws, beta_draws=beta_draws,
               xv = xv, partition = partition )
  
  return(draws)
}

